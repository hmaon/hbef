# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_hbef', [dirname(__file__)])
        except ImportError:
            import _hbef
            return _hbef
        if fp is not None:
            try:
                _mod = imp.load_module('_hbef', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _hbef = swig_import_helper()
    del swig_import_helper
else:
    import _hbef
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class coord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, coord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, coord, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _hbef.coord_x_set
    __swig_getmethods__["x"] = _hbef.coord_x_get
    if _newclass:x = _swig_property(_hbef.coord_x_get, _hbef.coord_x_set)
    __swig_setmethods__["y"] = _hbef.coord_y_set
    __swig_getmethods__["y"] = _hbef.coord_y_get
    if _newclass:y = _swig_property(_hbef.coord_y_get, _hbef.coord_y_set)
    def __init__(self): 
        this = _hbef.new_coord()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hbef.delete_coord
    __del__ = lambda self : None;
coord_swigregister = _hbef.coord_swigregister
coord_swigregister(coord)

class stackt(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, stackt, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, stackt, name)
    __repr__ = _swig_repr
    __swig_setmethods__["stack"] = _hbef.stackt_stack_set
    __swig_getmethods__["stack"] = _hbef.stackt_stack_get
    if _newclass:stack = _swig_property(_hbef.stackt_stack_get, _hbef.stackt_stack_set)
    __swig_setmethods__["stacksize"] = _hbef.stackt_stacksize_set
    __swig_getmethods__["stacksize"] = _hbef.stackt_stacksize_get
    if _newclass:stacksize = _swig_property(_hbef.stackt_stacksize_get, _hbef.stackt_stacksize_set)
    __swig_setmethods__["sp"] = _hbef.stackt_sp_set
    __swig_getmethods__["sp"] = _hbef.stackt_sp_get
    if _newclass:sp = _swig_property(_hbef.stackt_sp_get, _hbef.stackt_sp_set)
    def __init__(self): 
        this = _hbef.new_stackt()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hbef.delete_stackt
    __del__ = lambda self : None;
stackt_swigregister = _hbef.stackt_swigregister
stackt_swigregister(stackt)

class bef_interp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bef_interp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bef_interp, name)
    __repr__ = _swig_repr
    __swig_setmethods__["befungespace"] = _hbef.bef_interp_befungespace_set
    __swig_getmethods__["befungespace"] = _hbef.bef_interp_befungespace_get
    if _newclass:befungespace = _swig_property(_hbef.bef_interp_befungespace_get, _hbef.bef_interp_befungespace_set)
    __swig_setmethods__["mem"] = _hbef.bef_interp_mem_set
    __swig_getmethods__["mem"] = _hbef.bef_interp_mem_get
    if _newclass:mem = _swig_property(_hbef.bef_interp_mem_get, _hbef.bef_interp_mem_set)
    __swig_setmethods__["size"] = _hbef.bef_interp_size_set
    __swig_getmethods__["size"] = _hbef.bef_interp_size_get
    if _newclass:size = _swig_property(_hbef.bef_interp_size_get, _hbef.bef_interp_size_set)
    __swig_setmethods__["ip"] = _hbef.bef_interp_ip_set
    __swig_getmethods__["ip"] = _hbef.bef_interp_ip_get
    if _newclass:ip = _swig_property(_hbef.bef_interp_ip_get, _hbef.bef_interp_ip_set)
    __swig_setmethods__["delta"] = _hbef.bef_interp_delta_set
    __swig_getmethods__["delta"] = _hbef.bef_interp_delta_get
    if _newclass:delta = _swig_property(_hbef.bef_interp_delta_get, _hbef.bef_interp_delta_set)
    __swig_setmethods__["stack"] = _hbef.bef_interp_stack_set
    __swig_getmethods__["stack"] = _hbef.bef_interp_stack_get
    if _newclass:stack = _swig_property(_hbef.bef_interp_stack_get, _hbef.bef_interp_stack_set)
    __swig_setmethods__["call"] = _hbef.bef_interp_call_set
    __swig_getmethods__["call"] = _hbef.bef_interp_call_get
    if _newclass:call = _swig_property(_hbef.bef_interp_call_get, _hbef.bef_interp_call_set)
    __swig_setmethods__["CTX"] = _hbef.bef_interp_CTX_set
    __swig_getmethods__["CTX"] = _hbef.bef_interp_CTX_get
    if _newclass:CTX = _swig_property(_hbef.bef_interp_CTX_get, _hbef.bef_interp_CTX_set)
    __swig_setmethods__["mode"] = _hbef.bef_interp_mode_set
    __swig_getmethods__["mode"] = _hbef.bef_interp_mode_get
    if _newclass:mode = _swig_property(_hbef.bef_interp_mode_get, _hbef.bef_interp_mode_set)
    __swig_setmethods__["prevstrchar"] = _hbef.bef_interp_prevstrchar_set
    __swig_getmethods__["prevstrchar"] = _hbef.bef_interp_prevstrchar_get
    if _newclass:prevstrchar = _swig_property(_hbef.bef_interp_prevstrchar_get, _hbef.bef_interp_prevstrchar_set)
    __swig_setmethods__["teleport"] = _hbef.bef_interp_teleport_set
    __swig_getmethods__["teleport"] = _hbef.bef_interp_teleport_get
    if _newclass:teleport = _swig_property(_hbef.bef_interp_teleport_get, _hbef.bef_interp_teleport_set)
    def __init__(self, *args): 
        this = _hbef.new_bef_interp(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _hbef.delete_bef_interp
    __del__ = lambda self : None;
    def push(self, *args): return _hbef.bef_interp_push(self, *args)
    def pop(self): return _hbef.bef_interp_pop(self)
    def do(self, *args): return _hbef.bef_interp_do(self, *args)
bef_interp_swigregister = _hbef.bef_interp_swigregister
bef_interp_swigregister(bef_interp)


def strepl(*args):
  return _hbef.strepl(*args)
strepl = _hbef.strepl

def stpush(*args):
  return _hbef.stpush(*args)
stpush = _hbef.stpush

def stpeek(*args):
  return _hbef.stpeek(*args)
stpeek = _hbef.stpeek

def stpop(*args):
  return _hbef.stpop(*args)
stpop = _hbef.stpop

def stdig(*args):
  return _hbef.stdig(*args)
stdig = _hbef.stdig

def breplace(*args):
  return _hbef.breplace(*args)
breplace = _hbef.breplace

def push(*args):
  return _hbef.push(*args)
push = _hbef.push

def bpeek(*args):
  return _hbef.bpeek(*args)
bpeek = _hbef.bpeek

def pop(*args):
  return _hbef.pop(*args)
pop = _hbef.pop

def bef_allocinterp(*args):
  return _hbef.bef_allocinterp(*args)
bef_allocinterp = _hbef.bef_allocinterp

def bef_free(*args):
  return _hbef.bef_free(*args)
bef_free = _hbef.bef_free

def bef_reset(*args):
  return _hbef.bef_reset(*args)
bef_reset = _hbef.bef_reset

def bef_do(*args):
  return _hbef.bef_do(*args)
bef_do = _hbef.bef_do

def bef_step(*args):
  return _hbef.bef_step(*args)
bef_step = _hbef.bef_step

def bef_run(*args):
  return _hbef.bef_run(*args)
bef_run = _hbef.bef_run

def strtoicpy(*args):
  return _hbef.strtoicpy(*args)
strtoicpy = _hbef.strtoicpy

def bef_loadcode(*args):
  return _hbef.bef_loadcode(*args)
bef_loadcode = _hbef.bef_loadcode

def bef_load93(*args):
  return _hbef.bef_load93(*args)
bef_load93 = _hbef.bef_load93

def bef_loadh(*args):
  return _hbef.bef_loadh(*args)
bef_loadh = _hbef.bef_loadh

cvar = _hbef.cvar

